"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Status = void 0;
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var Status;
(function (Status) {
    Status[Status["Initial"] = 1] = "Initial";
    Status[Status["Moving"] = 2] = "Moving";
    Status[Status["Verifying"] = 3] = "Verifying";
    Status[Status["Confirmed"] = 4] = "Confirmed";
    Status[Status["Failed"] = 5] = "Failed";
})(Status = exports.Status || (exports.Status = {}));
var initialState = {
    status: Status.Initial,
};
var reducer = function (state, action) {
    switch (action.type) {
        case 'UpdateStatus':
            return __assign(__assign({}, state), { status: action.payload });
        default:
            return state;
    }
};
exports.default = (function (props) {
    var containerStyle = props.containerStyle, onSwipeStart = props.onSwipeStart, onConfirm = props.onConfirm, renderSlider = props.renderSlider, children = props.children, _a = props.threshold, threshold = _a === void 0 ? 0.5 : _a, onStatusChange = props.onStatusChange;
    var _b = react_1.useReducer(reducer, initialState), state = _b[0], dispatch = _b[1];
    var stateRef = react_1.useRef(state);
    var setStatus = function (s) {
        dispatch({
            type: 'UpdateStatus',
            payload: s,
        });
    };
    var containerWidthRef = react_1.useRef(0);
    var sliderWrapperWidthRef = react_1.useRef(0);
    var onSwipeStartRef = react_1.useRef(onSwipeStart);
    var onConfirmRef = react_1.useRef(onConfirm);
    var moveX = react_1.useRef(new react_native_1.Animated.Value(0)).current;
    react_1.useEffect(function () {
        if (state.status !== stateRef.current.status) {
            onStatusChange && onStatusChange(state.status);
        }
        stateRef.current = state;
    }, [state]);
    react_1.useEffect(function () {
        onSwipeStartRef.current = onSwipeStart;
    }, [onSwipeStart]);
    var panResponder = react_1.useRef(react_native_1.PanResponder.create({
        onStartShouldSetPanResponder: function (evt, gestureState) { return true; },
        onStartShouldSetPanResponderCapture: function (evt, gestureState) { return true; },
        onMoveShouldSetPanResponder: function (evt, gestureState) { return true; },
        onMoveShouldSetPanResponderCapture: function (evt, gestureState) { return true; },
        onPanResponderGrant: function (evt, gestureState) {
            if ([Status.Confirmed, Status.Verifying].includes(stateRef.current.status)) {
                return;
            }
            if (onSwipeStartRef && onSwipeStartRef.current) {
                onSwipeStartRef.current();
            }
            moveX.stopAnimation();
            setStatus(Status.Initial);
        },
        onPanResponderMove: function (evt, gestureState) {
            if ([Status.Confirmed, Status.Verifying].includes(stateRef.current.status)) {
                return;
            }
            setStatus(Status.Moving);
            var dx;
            dx = Math.min(containerWidthRef.current - sliderWrapperWidthRef.current, gestureState.dx);
            dx = Math.max(0, dx);
            moveX.setOffset(dx);
        },
        onPanResponderRelease: function (evt, gestureState) {
            if ([Status.Confirmed, Status.Verifying].includes(stateRef.current.status)) {
                return;
            }
            moveX.stopAnimation();
            moveX.flattenOffset();
            if (gestureState.dx / containerWidthRef.current >= threshold) {
                if (onConfirmRef && onConfirmRef.current) {
                    var confirmResult = onConfirmRef.current();
                    if (confirmResult && typeof confirmResult.then === 'function') {
                        setStatus(Status.Verifying);
                        confirmResult
                            .then(function () {
                            setStatus(Status.Confirmed);
                        })
                            .catch(function () {
                            setStatus(Status.Failed);
                        });
                    }
                }
                else {
                    setStatus(Status.Confirmed);
                }
            }
            else {
                setStatus(Status.Initial);
            }
        },
    })).current;
    react_1.useEffect(function () {
        if (state.status === Status.Moving) {
            return;
        }
        react_native_1.Animated.timing(moveX, {
            toValue: [Status.Confirmed, Status.Verifying].includes(state.status)
                ? containerWidthRef.current - sliderWrapperWidthRef.current
                : 0,
            duration: 400,
            easing: react_native_1.Easing.out(react_native_1.Easing.exp),
            useNativeDriver: true,
        }).start();
    }, [state.status]);
    return (react_1.default.createElement(react_native_1.View, { style: [styles.container, containerStyle], onLayout: function (event) {
            return (containerWidthRef.current = event.nativeEvent.layout.width);
        } },
        children,
        react_1.default.createElement(react_native_1.Animated.View, __assign({ style: [
                styles.sliderWrapper,
                {
                    transform: [
                        {
                            translateX: moveX,
                        },
                    ],
                },
            ], onLayout: function (event) {
                sliderWrapperWidthRef.current = event.nativeEvent.layout.width;
            } }, panResponder.panHandlers), renderSlider ? (renderSlider(state.status)) : (react_1.default.createElement(react_native_1.View, { style: [styles.slider] })))));
});
var styles = react_native_1.StyleSheet.create({
    container: {
        width: '100%',
        height: 48,
        backgroundColor: '#2985FF',
        position: 'relative',
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 12,
        borderRadius: 48,
    },
    sliderWrapper: {
        left: 0,
        top: 0,
        position: 'absolute',
    },
    slider: {
        height: 40,
        width: 40,
        padding: 4,
        backgroundColor: 'white',
        borderRadius: 40,
    },
});
